from aiogram import Router, F
from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession

from handlers.base import BaseHandler
from di.dependencies import get_session


class TextHandler(BaseHandler):
    """Handler for text messages."""
    
    def __init__(self):
        super().__init__()
        self.router.message.register(self.handle_text)
    
    async def handle_text(self, message: Message):
        """Handle text messages."""
        async for session in get_session():
            text = message.text.lower().strip()
            
            if "—Ö–æ—á—É —Å–ª–∞–¥–∫–æ–≥–æ" in text or "—Ö–æ—á—É —Å–ª–∞–¥–∫–æ–µ" in text:
                await self.handle_sweet_craving(message, session)
            elif "–º–æ—Ç–∏–≤–∞—Ü–∏—è" in text:
                await self.handle_motivation_request(message, session)
            elif "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" in text or "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫" in text:
                await self.handle_stats_request(message, session)
            elif "–ø–æ–º–æ—â—å" in text or "help" in text:
                await self.handle_help_request(message, session)
    
    async def handle_sweet_craving(self, message: Message, session: AsyncSession):
        """Handle sweet craving messages."""
        user = await self.get_user(session, message.from_user.id)
        
        # Get alternative snacks
        recipe_service = self.get_recipe_service()
        alternatives = recipe_service.get_alternative_snacks()
        
        # Get motivation message
        motivation_service = self.get_motivation_service()
        motivation = motivation_service.get_success_message(user.current_streak)
        
        text = (
            f"üç≠ <b>–ü–æ–Ω–∏–º–∞—é, —Ö–æ—á–µ—Ç—Å—è —Å–ª–∞–¥–∫–æ–≥–æ!</b>\n\n"
            f"üí™ {motivation}\n\n"
            f"üçé <b>–í–º–µ—Å—Ç–æ —Å–ª–∞–¥–∫–æ–≥–æ –ø–æ–ø—Ä–æ–±—É–π:</b>\n"
            f"{alternatives}\n\n"
            f"üî• –¢–≤–æ—è —Å–µ—Ä–∏—è: <b>{user.current_streak}</b> –¥–Ω–µ–π\n"
            f"üí™ –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è! –î–µ—Ä–∂–∏—Å—å!"
        )
        
        await message.answer(text, parse_mode="HTML")
    
    async def handle_motivation_request(self, message: Message, session: AsyncSession):
        """Handle motivation request."""
        user = await self.get_user(session, message.from_user.id)
        
        motivation_service = self.get_motivation_service()
        motivation = motivation_service.get_daily_motivation()
        
        text = (
            f"üí™ <b>–ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–Ω—è:</b>\n\n"
            f"{motivation}\n\n"
            f"üî• –¢–≤–æ—è —Å–µ—Ä–∏—è: <b>{user.current_streak}</b> –¥–Ω–µ–π\n"
            f"üèÜ –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: <b>{user.longest_streak}</b> –¥–Ω–µ–π"
        )
        
        await message.answer(text, parse_mode="HTML")
    
    async def handle_stats_request(self, message: Message, session: AsyncSession):
        """Handle statistics request."""
        user = await self.get_user(session, message.from_user.id)
        checkin_repo = await self.get_checkin_repo(session)
        
        stats = await checkin_repo.get_user_stats(user.id)
        
        text = (
            f"üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
            f"üéØ –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: <b>{user.current_streak}</b> –¥–Ω–µ–π\n"
            f"üèÜ –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: <b>{user.longest_streak}</b> –¥–Ω–µ–π\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –¥–Ω–µ–π: <b>{stats['success_count']}</b>\n"
            f"‚ùå –°—Ä—ã–≤–æ–≤: <b>{stats['fail_count']}</b>\n"
            f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: <b>{stats['success_rate']:.1f}%</b>\n"
            f"üìÖ –í—Å–µ–≥–æ –¥–Ω–µ–π: <b>{stats['total_days']}</b>"
        )
        
        await message.answer(text, parse_mode="HTML")
    
    async def handle_help_request(self, message: Message, session: AsyncSession):
        """Handle help request."""
        text = (
            "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å</b>\n\n"
            "üç≠ <b>–ë–æ—Ç –¥–ª—è –æ—Ç–∫–∞–∑–∞ –æ—Ç —Å–∞—Ö–∞—Ä–∞</b>\n\n"
            "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/note - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
            "/recipe - –ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç\n\n"
            "<b>–§—É–Ω–∫—Ü–∏–∏:</b>\n"
            "‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —á–µ–∫-–∏–Ω—ã\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
            "üç≥ –†–µ—Ü–µ–ø—Ç—ã –±–µ–∑ —Å–∞—Ö–∞—Ä–∞\n"
            "üéØ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏\n"
            "üìù –î–Ω–µ–≤–Ω–∏–∫ –∑–∞–º–µ—Ç–æ–∫\n"
            "üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ '—Ö–æ—á—É —Å–ª–∞–¥–∫–æ–≥–æ' –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤!"
        )
        
        await message.answer(text, parse_mode="HTML") 