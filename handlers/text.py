from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy.ext.asyncio import AsyncSession

from handlers.base import BaseHandler
from di.dependencies import get_session
from services.user_state_service import UserState


class TextHandler(BaseHandler):
    """Handler for text messages."""
    
    def __init__(self):
        super().__init__()
        self.router.message.register(self.handle_text)
    
    async def handle_text(self, message: Message):
        """Handle text messages."""
        async for session in get_session():
            text = message.text.lower().strip()
            
            if "—Ö–æ—á—É —Å–ª–∞–¥–∫–æ–≥–æ" in text or "—Ö–æ—á—É —Å–ª–∞–¥–∫–æ–µ" in text:
                await self.handle_sweet_craving(message, session)
            elif "–º–æ—Ç–∏–≤–∞—Ü–∏—è" in text:
                await self.handle_motivation_request(message, session)
            elif "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" in text or "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫" in text:
                await self.handle_stats_request(message, session)
            elif "–ø–æ–º–æ—â—å" in text or "help" in text:
                await self.handle_help_request(message, session)
            else:
                # Check if user is in recipe or note creation mode
                await self.check_user_state(message, session)
    
    async def check_user_state(self, message: Message, session: AsyncSession):
        """Check if user is in recipe or note creation mode."""
        user_id = message.from_user.id
        user_state_service = self.get_user_state_service()
        
        # Debug: log user state
        from loguru import logger
        current_state = user_state_service.get_user_state(user_id)
        logger.info(f"User {user_id} state: {current_state}")
        
        # Check if user is waiting for recipe ingredients
        if user_state_service.is_waiting_for_recipe(user_id):
            logger.info(f"User {user_id} is waiting for recipe ingredients")
            await self.create_recipe_from_text(message, session)
            user_state_service.clear_user_state(user_id)
        # Check if user is waiting for note content
        elif user_state_service.is_waiting_for_note(user_id):
            logger.info(f"User {user_id} is waiting for note content")
            await self.create_note_from_text(message, session)
            user_state_service.clear_user_state(user_id)
        # Check if user is waiting for slip analysis
        elif user_state_service.is_waiting_for_slip_analysis(user_id):
            logger.info(f"User {user_id} is waiting for slip analysis")
            await self.create_slip_analysis_from_text(message, session)
            user_state_service.clear_user_state(user_id)
        else:
            # Default response for unrecognized text
            logger.info(f"User {user_id} is in idle state, showing unknown text message")
            await self.handle_unknown_text(message, session)
    
    async def handle_unknown_text(self, message: Message, session: AsyncSession):
        """Handle unrecognized text messages."""
        text = (
            "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–∫–∞–∑–∞—Ç—å.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π:\n"
            "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å '—Ö–æ—á—É —Å–ª–∞–¥–∫–æ–≥–æ' –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é\n"
            "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å '–ø–æ–º–æ—â—å' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
        )
        await message.answer(text)
    
    async def create_note_from_text(self, message: Message, session: AsyncSession):
        """Create note from text message."""
        user = await self.get_user(session, message.from_user.id)
        note_repo = await self.get_note_repo(session)
        
        # Send processing message
        processing_message = await message.answer(
            "‚è≥ <b>–°–æ—Ö—Ä–∞–Ω—è—é –∑–∞–º–µ—Ç–∫—É...</b>",
            parse_mode="HTML"
        )
        
        try:
            # Create note
            await note_repo.create_note(user.id, message.text)
            
            # Delete processing message
            await processing_message.delete()
            
            text = (
                "‚úÖ <b>–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>\n\n"
                "–¢–≤–æ–∏ –º—ã—Å–ª–∏ –≤–∞–∂–Ω—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. "
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ —Å–≤–æ–∏—Ö —É—Å–ø–µ—Ö–æ–≤!"
            )
            
            await message.answer(text, parse_mode="HTML")
            
        except Exception as e:
            from loguru import logger
            logger.error(f"Error creating note: {e}")
            
            # Delete processing message and send error
            await processing_message.delete()
            
            text = (
                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            
            await message.answer(text, parse_mode="HTML")
    
    async def create_recipe_from_text(self, message: Message, session: AsyncSession):
        """Create recipe from text message."""
        user = await self.get_user(session, message.from_user.id)
        recipe_repo = await self.get_recipe_repo(session)
        
        # Send waiting message
        waiting_message = await message.answer(
            "‚è≥ <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ—Ü–µ–ø—Ç...</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∫–∞ –ò–ò —Å–æ–∑–¥–∞–µ—Ç –¥–ª—è –≤–∞—Å –≤–∫—É—Å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –±–µ–∑ —Å–∞—Ö–∞—Ä–∞! üç≥",
            parse_mode="HTML"
        )
        
        try:
            # Generate recipe using AI service
            ai_service = self.get_ai_service()
            recipe_text = await ai_service.generate_recipe(message.text)
            
            # Save recipe to database
            await recipe_repo.create_recipe(user.id, message.text, recipe_text)
            
            # Delete waiting message and send recipe
            await waiting_message.delete()
            
            text = (
                "üç≥ <b>–í–æ—Ç —Ç–≤–æ–π —Ä–µ—Ü–µ–ø—Ç –±–µ–∑ —Å–∞—Ö–∞—Ä–∞!</b>\n\n"
                f"<b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b> {message.text}\n\n"
                f"<b>–†–µ—Ü–µ–ø—Ç:</b>\n{recipe_text}"
            )
            
            await message.answer(text, parse_mode="HTML")
            
        except Exception as e:
            from loguru import logger
            logger.error(f"Error creating recipe: {e}")
            
            # Delete waiting message and send error
            await waiting_message.delete()
            
            text = (
                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            
            await message.answer(text, parse_mode="HTML")
    
    async def handle_sweet_craving(self, message: Message, session: AsyncSession):
        """Handle sweet craving messages."""
        user = await self.get_user(session, message.from_user.id)
        
        # Get alternative snacks
        recipe_service = self.get_recipe_service()
        alternatives = await recipe_service.get_alternative_snacks()
        
        # Get motivation message
        motivation_service = self.get_motivation_service()
        motivation = motivation_service.get_success_message(user.current_streak)
        
        text = (
            f"üç≠ <b>–ü–æ–Ω–∏–º–∞—é, —Ö–æ—á–µ—Ç—Å—è —Å–ª–∞–¥–∫–æ–≥–æ!</b>\n\n"
            f"üí™ {motivation}\n\n"
            f"üçé <b>–í–º–µ—Å—Ç–æ —Å–ª–∞–¥–∫–æ–≥–æ –ø–æ–ø—Ä–æ–±—É–π:</b>\n"
            f"{alternatives}\n\n"
            f"üî• –¢–≤–æ—è —Å–µ—Ä–∏—è: <b>{user.current_streak}</b> –¥–Ω–µ–π\n"
            f"üí™ –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è! –î–µ—Ä–∂–∏—Å—å!"
        )
        
        await message.answer(text, parse_mode="HTML")
    
    async def handle_motivation_request(self, message: Message, session: AsyncSession):
        """Handle motivation request."""
        user = await self.get_user(session, message.from_user.id)
        
        motivation_service = self.get_motivation_service()
        motivation = motivation_service.get_daily_motivation()
        
        text = (
            f"üí™ <b>–ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–Ω—è:</b>\n\n"
            f"{motivation}\n\n"
            f"üî• –¢–≤–æ—è —Å–µ—Ä–∏—è: <b>{user.current_streak}</b> –¥–Ω–µ–π\n"
            f"üèÜ –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: <b>{user.longest_streak}</b> –¥–Ω–µ–π"
        )
        
        await message.answer(text, parse_mode="HTML")
    
    async def handle_stats_request(self, message: Message, session: AsyncSession):
        """Handle statistics request."""
        user = await self.get_user(session, message.from_user.id)
        checkin_repo = await self.get_checkin_repo(session)
        
        stats = await checkin_repo.get_user_stats(user.id)
        
        text = (
            f"üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
            f"üéØ –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: <b>{user.current_streak}</b> –¥–Ω–µ–π\n"
            f"üèÜ –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: <b>{user.longest_streak}</b> –¥–Ω–µ–π\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –¥–Ω–µ–π: <b>{stats['success_count']}</b>\n"
            f"‚ùå –°—Ä—ã–≤–æ–≤: <b>{stats['fail_count']}</b>\n"
            f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: <b>{stats['success_rate']:.1f}%</b>\n"
            f"üìÖ –í—Å–µ–≥–æ –¥–Ω–µ–π: <b>{stats['total_days']}</b>"
        )
        
        await message.answer(text, parse_mode="HTML")
    
    async def handle_help_request(self, message: Message, session: AsyncSession):
        """Handle help request."""
        text = (
            "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å</b>\n\n"
            "üç≠ <b>–ë–æ—Ç –¥–ª—è –æ—Ç–∫–∞–∑–∞ –æ—Ç —Å–∞—Ö–∞—Ä–∞</b>\n\n"
            "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/note - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
            "/recipe - –ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç\n\n"
            "<b>–§—É–Ω–∫—Ü–∏–∏:</b>\n"
            "‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —á–µ–∫-–∏–Ω—ã\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
            "üç≥ –†–µ—Ü–µ–ø—Ç—ã –±–µ–∑ —Å–∞—Ö–∞—Ä–∞\n"
            "üéØ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏\n"
            "üìù –î–Ω–µ–≤–Ω–∏–∫ –∑–∞–º–µ—Ç–æ–∫\n"
            "üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ '—Ö–æ—á—É —Å–ª–∞–¥–∫–æ–≥–æ' –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤!"
        )
        
        await message.answer(text, parse_mode="HTML") 

    async def create_slip_analysis_from_text(self, message: Message, session: AsyncSession):
        """Create slip analysis from text message."""
        user = await self.get_user(session, message.from_user.id)
        note_repo = await self.get_note_repo(session)
        
        # Send processing message
        processing_message = await message.answer(
            "‚è≥ <b>–°–æ—Ö—Ä–∞–Ω—è—é –∞–Ω–∞–ª–∏–∑ —Å—Ä—ã–≤–∞...</b>",
            parse_mode="HTML"
        )
        
        try:
            # Create note with slip analysis prefix
            analysis_text = f"üìù –ê–ù–ê–õ–ò–ó –°–†–´–í–ê:\n\n{message.text}"
            await note_repo.create_note(user.id, analysis_text)
            
            # Delete processing message
            await processing_message.delete()
            
            text = (
                "‚úÖ <b>–ê–Ω–∞–ª–∏–∑ —Å—Ä—ã–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"
                "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ê–Ω–∞–ª–∏–∑–∏—Ä—É—è –ø—Ä–∏—á–∏–Ω—ã —Å—Ä—ã–≤–æ–≤, —Ç—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —Å–∏–ª—å–Ω–µ–µ.\n\n"
                "üí° <b>–°–æ–≤–µ—Ç—ã:</b>\n"
                "‚Ä¢ –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–π —ç—Ç–æ—Ç –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–¥ —Å–ª–æ–∂–Ω—ã–º–∏ —Å–∏—Ç—É–∞—Ü–∏—è–º–∏\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –ø–ª–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Å–æ—Å—Ç–∞–≤–∏–ª\n"
                "‚Ä¢ –ü–æ–º–Ω–∏: –∫–∞–∂–¥—ã–π —Å—Ä—ã–≤ - —ç—Ç–æ —É—Ä–æ–∫\n\n"
                "üí™ –ó–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å! –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è!"
            )
            
            keyboard = [
                [
                    InlineKeyboardButton(text="üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data="menu_motivation"),
                    InlineKeyboardButton(text="üç≥ –†–µ—Ü–µ–ø—Ç—ã", callback_data="menu_recipes")
                ],
                [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_back")]
            ]
            
            await message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
            
        except Exception as e:
            from loguru import logger
            logger.error(f"Error creating slip analysis: {e}")
            
            # Delete processing message and send error
            await processing_message.delete()
            
            text = (
                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å—Ä—ã–≤–∞</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            
            await message.answer(text, parse_mode="HTML")

    def get_user_state_service(self):
        """Get user state service from container."""
        from di.container import container
        return container.user_state_service 