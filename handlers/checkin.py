from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime

from handlers.base import BaseHandler
from di.dependencies import get_session
from services.user_state_service import UserState


class CheckInHandler(BaseHandler):
    """Handler for daily check-ins."""
    
    def __init__(self):
        super().__init__()
        self.router.callback_query.register(self.handle_checkin, F.data.startswith("checkin_"))
        self.router.callback_query.register(self.handle_challenge, F.data == "challenge_complete")
        self.router.callback_query.register(self.handle_slip_analysis, F.data == "slip_analysis")
    
    async def handle_checkin(self, callback: CallbackQuery):
        """Handle check-in button clicks."""
        async for session in get_session():
            action = callback.data.split("_")[1]
            
            if action == "success":
                await self.process_success_checkin(callback, session)
            elif action == "fail":
                await self.process_fail_checkin(callback, session)
            
            await callback.answer()
    
    async def process_success_checkin(self, callback: CallbackQuery, session: AsyncSession):
        """Process successful check-in."""
        user = await self.get_user(session, callback.from_user.id)
        checkin_repo = await self.get_checkin_repo(session)
        
        # Check if already checked in today
        today_checkin = await checkin_repo.get_today_checkin(user.id)
        if today_checkin:
            text = "–°–µ–≥–æ–¥–Ω—è —Ç—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª—Å—è! –ú–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç –∑–∞–≤—Ç—Ä–∞."
            keyboard = self.get_back_keyboard()
            await callback.message.edit_text(text, reply_markup=keyboard)
            return
        
        # Create check-in
        await checkin_repo.create_checkin(user.id, True)
        
        # Update user streak
        old_streak = user.current_streak
        await checkin_repo.update_streak(user.id, True)
        
        # Refresh user object to get updated data
        await session.refresh(user)
        
        # Debug: log streak update
        from loguru import logger
        logger.info(f"User {user.user_id} streak updated: {old_streak} -> {user.current_streak}, longest: {user.longest_streak}")
        
        # Get motivation message
        motivation_service = self.get_motivation_service()
        motivation_text = motivation_service.get_success_message(user.current_streak)
        
        text = (
            f"‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –¢—ã —É–¥–µ—Ä–∂–∞–ª—Å—è!</b>\n\n"
            f"{motivation_text}\n\n"
            f"üî• –¢–≤–æ—è —Å–µ—Ä–∏—è: <b>{user.current_streak}</b> –¥–Ω–µ–π\n"
            f"üèÜ –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: <b>{user.longest_streak}</b> –¥–Ω–µ–π"
        )
        
        keyboard = self.get_back_keyboard()
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    
    async def process_fail_checkin(self, callback: CallbackQuery, session: AsyncSession):
        """Process failed check-in."""
        user = await self.get_user(session, callback.from_user.id)
        checkin_repo = await self.get_checkin_repo(session)
        
        # Check if already checked in today
        today_checkin = await checkin_repo.get_today_checkin(user.id)
        if today_checkin:
            text = "–°–µ–≥–æ–¥–Ω—è —Ç—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª—Å—è! –ú–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç –∑–∞–≤—Ç—Ä–∞."
            keyboard = self.get_back_keyboard()
            await callback.message.edit_text(text, reply_markup=keyboard)
            return
        
        # Create check-in
        await checkin_repo.create_checkin(user.id, False)
        
        # Update user streak
        await checkin_repo.update_streak(user.id, False)
        
        # Refresh user object to get updated data
        await session.refresh(user)
        
        # Get slip-up message and payment reminder
        motivation_service = self.get_motivation_service()
        slip_up_text = motivation_service.get_slip_up_message()
        payment_text = motivation_service.get_payment_reminder()
        
        text = (
            f"‚ùå <b>–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —Å—Ä—ã–≤—ã –±—ã–≤–∞—é—Ç —É –≤—Å–µ—Ö!</b>\n\n"
            f"{slip_up_text}\n\n"
            f"üí≥ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> {payment_text}\n\n"
            f"üî• –¢–≤–æ—è —Å–µ—Ä–∏—è: <b>{user.current_streak}</b> –¥–Ω–µ–π\n"
            f"üèÜ –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: <b>{user.longest_streak}</b> –¥–Ω–µ–π\n\n"
            f"üí™ –ó–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å! –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ!"
        )
        
        keyboard = [
            [
                InlineKeyboardButton(text="üìù –ê–Ω–∞–ª–∏–∑ —Å—Ä—ã–≤–∞", callback_data="slip_analysis"),
                InlineKeyboardButton(text="üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data="menu_motivation")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_back")]
        ]
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    
    async def handle_challenge(self, callback: CallbackQuery):
        """Handle challenge completion."""
        async for session in get_session():
            user = await self.get_user(session, callback.from_user.id)
            challenge_repo = await self.get_challenge_repo(session)
            
            today_challenge = await challenge_repo.get_today_challenge(user.id)
            if today_challenge and not today_challenge.completed:
                await challenge_repo.complete_challenge(today_challenge.id)
                
                text = (
                    "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ß–µ–ª–ª–µ–Ω–¥–∂ –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
                    "–¢—ã –º–æ–ª–æ–¥–µ—Ü! –ö–∞–∂–¥—ã–π –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ —Ü–µ–ª–∏."
                )
                
                keyboard = self.get_back_keyboard()
                await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            else:
                await callback.answer("–ß–µ–ª–ª–µ–Ω–¥–∂ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            
            await callback.answer()
    
    async def handle_slip_analysis(self, callback: CallbackQuery):
        """Handle slip analysis request."""
        async for session in get_session():
            user = await self.get_user(session, callback.from_user.id)
            
            # Set user state to waiting for slip analysis
            user_state_service = self.get_user_state_service()
            user_state_service.set_user_state(callback.from_user.id, UserState.WAITING_FOR_SLIP_ANALYSIS)
            
            text = (
                "üìù <b>–ê–Ω–∞–ª–∏–∑ —Å—Ä—ã–≤–∞</b>\n\n"
                "–ü–æ–º–æ–≥–∏ —Å–µ–±–µ —Å—Ç–∞—Ç—å —Å–∏–ª—å–Ω–µ–µ! –ù–∞–ø–∏—à–∏:\n\n"
                "üîç <b>–ü—Ä–∏—á–∏–Ω—ã —Å—Ä—ã–≤–∞:</b>\n"
                "‚Ä¢ –ß—Ç–æ –ø—Ä–∏–≤–µ–ª–æ –∫ —Å—Ä—ã–≤—É?\n"
                "‚Ä¢ –ö–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ —Ç—ã –∏—Å–ø—ã—Ç—ã–≤–∞–ª?\n"
                "‚Ä¢ –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ –≤–æ–∫—Ä—É–≥?\n\n"
                "üí° <b>–ü–ª–∞–Ω –Ω–∞ –±—É–¥—É—â–µ–µ:</b>\n"
                "‚Ä¢ –ö–∞–∫ –∏–∑–±–µ–∂–∞—Ç—å —Ç–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?\n"
                "‚Ä¢ –ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É?\n"
                "‚Ä¢ –ö–∞–∫–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?\n\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –∞–Ω–∞–ª–∏–∑ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
            )
            
            keyboard = [[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="menu_back")]]
            await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
            
            await callback.answer()
    
    def get_back_keyboard(self) -> InlineKeyboardMarkup:
        """Create back keyboard."""
        keyboard = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_back")]]
        return InlineKeyboardMarkup(inline_keyboard=keyboard) 