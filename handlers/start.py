from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession

from handlers.base import BaseHandler
from di.dependencies import get_session


class StartHandler(BaseHandler):
    """Handler for /start command and main menu."""
    
    def __init__(self):
        super().__init__()
        self.router.message.register(self.start_command, Command("start"))
        self.router.callback_query.register(self.handle_menu, F.data.startswith("menu_"))
    
    async def start_command(self, message: Message):
        """Handle /start command."""
        async for session in get_session():
            # Get or create user
            user = await self.get_user(session, message.from_user.id)
            
            # Update user info if needed
            if user.username != message.from_user.username:
                user.username = message.from_user.username
                user.first_name = message.from_user.first_name
                user.last_name = message.from_user.last_name
                await session.commit()
            
            welcome_text = (
                f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
                "üç≠ –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Å–∞—Ö–∞—Ä–∞ –∏ –≤–µ—Å—Ç–∏ –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏!\n\n"
                "üìä –¢–≤–æ—è —Ç–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: <b>{}</b> –¥–Ω–µ–π\n"
                "üèÜ –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: <b>{}</b> –¥–Ω–µ–π\n\n"
                "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
            ).format(user.current_streak, user.longest_streak)
            
            keyboard = self.get_main_menu_keyboard()
            
            await message.answer(welcome_text, reply_markup=keyboard, parse_mode="HTML")
    
    def get_main_menu_keyboard(self) -> InlineKeyboardMarkup:
        """Create main menu keyboard."""
        keyboard = [
            [
                InlineKeyboardButton(text="‚úÖ –ß–µ–∫-–∏–Ω", callback_data="menu_checkin"),
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu_stats")
            ],
            [
                InlineKeyboardButton(text="üç≥ –†–µ—Ü–µ–ø—Ç—ã", callback_data="menu_recipes"),
                InlineKeyboardButton(text="üéØ –ß–µ–ª–ª–µ–Ω–¥–∂", callback_data="menu_challenge")
            ],
            [
                InlineKeyboardButton(text="üìù –ó–∞–º–µ—Ç–∫–∏", callback_data="menu_notes"),
                InlineKeyboardButton(text="üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data="menu_motivation")
            ],
            [
                InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="menu_help")
            ]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    async def handle_menu(self, callback: CallbackQuery):
        """Handle menu button clicks."""
        async for session in get_session():
            action = callback.data.split("_")[1]
            
            if action == "checkin":
                await self.show_checkin_menu(callback, session)
            elif action == "stats":
                await self.show_stats(callback, session)
            elif action == "recipes":
                await self.show_recipes_menu(callback, session)
            elif action == "challenge":
                await self.show_challenge(callback, session)
            elif action == "notes":
                await self.show_notes_menu(callback, session)
            elif action == "motivation":
                await self.show_motivation(callback, session)
            elif action == "help":
                await self.show_help(callback, session)
            
            await callback.answer()
    
    async def show_checkin_menu(self, callback: CallbackQuery, session: AsyncSession):
        """Show check-in menu."""
        user = await self.get_user(session, callback.from_user.id)
        checkin_repo = await self.get_checkin_repo(session)
        
        today_checkin = await checkin_repo.get_today_checkin(user.id)
        
        if today_checkin:
            text = (
                f"–°–µ–≥–æ–¥–Ω—è —Ç—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª—Å—è: {'‚úÖ –£–¥–µ—Ä–∂–∞–ª—Å—è' if today_checkin.success else '‚ùå –°–æ—Ä–≤–∞–ª—Å—è'}\n\n"
                f"–¢–≤–æ—è —Å–µ—Ä–∏—è: {user.current_streak} –¥–Ω–µ–π"
            )
        else:
            text = (
                f"–°–µ–≥–æ–¥–Ω—è —Ç—ã –µ—â–µ –Ω–µ –æ—Ç–º–µ—á–∞–ª—Å—è!\n\n"
                f"–¢–≤–æ—è —Å–µ—Ä–∏—è: {user.current_streak} –¥–Ω–µ–π\n\n"
                "–ö–∞–∫ –ø—Ä–æ—à–µ–ª —Ç–≤–æ–π –¥–µ–Ω—å?"
            )
        
        keyboard = [
            [
                InlineKeyboardButton(text="‚úÖ –£–¥–µ—Ä–∂–∞–ª—Å—è", callback_data="checkin_success"),
                InlineKeyboardButton(text="‚ùå –°–æ—Ä–≤–∞–ª—Å—è", callback_data="checkin_fail")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_back")]
        ]
        
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    
    async def show_stats(self, callback: CallbackQuery, session: AsyncSession):
        """Show user statistics."""
        user = await self.get_user(session, callback.from_user.id)
        checkin_repo = await self.get_checkin_repo(session)
        
        stats = await checkin_repo.get_user_stats(user.id)
        
        text = (
            f"üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
            f"üéØ –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: <b>{user.current_streak}</b> –¥–Ω–µ–π\n"
            f"üèÜ –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: <b>{user.longest_streak}</b> –¥–Ω–µ–π\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –¥–Ω–µ–π: <b>{stats['success_count']}</b>\n"
            f"‚ùå –°—Ä—ã–≤–æ–≤: <b>{stats['fail_count']}</b>\n"
            f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: <b>{stats['success_rate']:.1f}%</b>\n"
            f"üìÖ –í—Å–µ–≥–æ –¥–Ω–µ–π: <b>{stats['total_days']}</b>"
        )
        
        keyboard = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_back")]]
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
    
    async def show_recipes_menu(self, callback: CallbackQuery, session: AsyncSession):
        """Show recipes menu."""
        text = (
            "üç≥ <b>–†–µ—Ü–µ–ø—Ç—ã –±–µ–∑ —Å–∞—Ö–∞—Ä–∞</b>\n\n"
            "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ–ª–µ–∑–Ω—ã—Ö –±–ª—é–¥ –±–µ–∑ —Å–∞—Ö–∞—Ä–∞.\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = [
            [
                InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç", callback_data="recipe_create"),
                InlineKeyboardButton(text="üìã –ú–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã", callback_data="recipe_list")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_back")]
        ]
        
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
    
    async def show_challenge(self, callback: CallbackQuery, session: AsyncSession):
        """Show daily challenge."""
        user = await self.get_user(session, callback.from_user.id)
        challenge_repo = await self.get_challenge_repo(session)
        
        today_challenge = await challenge_repo.get_today_challenge(user.id)
        
        if today_challenge:
            status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if today_challenge.completed else "‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ"
            text = (
                f"üéØ <b>–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —á–µ–ª–ª–µ–Ω–¥–∂:</b>\n\n"
                f"{today_challenge.description}\n\n"
                f"–°—Ç–∞—Ç—É—Å: {status}"
            )
            
            keyboard = []
            if not today_challenge.completed:
                keyboard.append([InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª", callback_data="challenge_complete")])
            keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_back")])
        else:
            text = "üéØ –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞!"
            keyboard = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_back")]]
        
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
    
    async def show_notes_menu(self, callback: CallbackQuery, session: AsyncSession):
        """Show notes menu."""
        text = (
            "üìù <b>–ó–∞–º–µ—Ç–∫–∏</b>\n\n"
            "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ —Å–≤–æ–∏—Ö —É—Å–ø–µ—Ö–æ–≤ –∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –º—ã—Å–ª–∏.\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = [
            [
                InlineKeyboardButton(text="‚úèÔ∏è –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞", callback_data="note_create"),
                InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏", callback_data="note_list")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_back")]
        ]
        
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
    
    async def show_motivation(self, callback: CallbackQuery, session: AsyncSession):
        """Show motivation message."""
        motivation_service = self.get_motivation_service()
        text = motivation_service.get_daily_motivation()
        
        keyboard = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_back")]]
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    
    async def show_help(self, callback: CallbackQuery, session: AsyncSession):
        """Show help information."""
        text = (
            "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å</b>\n\n"
            "üç≠ <b>–ë–æ—Ç –¥–ª—è –æ—Ç–∫–∞–∑–∞ –æ—Ç —Å–∞—Ö–∞—Ä–∞</b>\n\n"
            "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/note - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É\n"
            "/recipe - –ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç\n\n"
            "<b>–§—É–Ω–∫—Ü–∏–∏:</b>\n"
            "‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —á–µ–∫-–∏–Ω—ã\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
            "üç≥ –†–µ—Ü–µ–ø—Ç—ã –±–µ–∑ —Å–∞—Ö–∞—Ä–∞\n"
            "üéØ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏\n"
            "üìù –î–Ω–µ–≤–Ω–∏–∫ –∑–∞–º–µ—Ç–æ–∫\n"
            "üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ '—Ö–æ—á—É —Å–ª–∞–¥–∫–æ–≥–æ' –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤!"
        )
        
        keyboard = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_back")]]
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML") 