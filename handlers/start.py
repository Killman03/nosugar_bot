from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession

from handlers.base import BaseHandler
from di.dependencies import get_session


class StartHandler(BaseHandler):
    """Handler for /start command and main menu."""
    
    def __init__(self):
        super().__init__()
        self.router.message.register(self.start_command, Command("start"))
        self.router.message.register(self.test_reminder_command, Command("test_reminder"))
        self.router.message.register(self.test_challenge_command, Command("test_challenge"))
        self.router.callback_query.register(self.handle_menu, F.data.startswith("menu_"))
    
    async def start_command(self, message: Message):
        """Handle /start command."""
        async for session in get_session():
            # Get or create user
            user = await self.get_user(session, message.from_user.id)
            
            # Update user info if needed
            if user.username != message.from_user.username:
                user.username = message.from_user.username
                user.first_name = message.from_user.first_name
                user.last_name = message.from_user.last_name
                await session.commit()
            
            welcome_text = (
                f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
                "üç≠ –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Å–∞—Ö–∞—Ä–∞ –∏ –≤–µ—Å—Ç–∏ –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏!\n\n"
                "üìä –¢–≤–æ—è —Ç–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: <b>{}</b> –¥–Ω–µ–π\n"
                "üèÜ –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: <b>{}</b> –¥–Ω–µ–π\n\n"
                "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
            ).format(user.current_streak, user.longest_streak)
            
            # Show inline keyboard for menu options
            inline_keyboard = self.get_main_menu_keyboard()
            
            # Show reply keyboard with Start button
            reply_keyboard = self.get_reply_keyboard()
            
            await message.answer(
                welcome_text, 
                reply_markup=reply_keyboard,
                parse_mode="HTML"
            )
            
            # Send inline keyboard as separate message
            await message.answer(
                "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
                reply_markup=inline_keyboard
            )
    
    async def test_reminder_command(self, message: Message):
        """Handle /test_reminder command for testing reminders."""
        try:
            scheduler = self.get_scheduler_service()
            await scheduler.send_test_reminder(message.from_user.id)
            
            await message.answer(
                "üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å, –ø–æ–ª—É—á–∏–ª –ª–∏ —Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º.",
                parse_mode="HTML"
            )
        except Exception as e:
            from loguru import logger
            logger.error(f"Error sending test reminder: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
    
    async def test_challenge_command(self, message: Message):
        """Handle /test_challenge command for testing challenge creation."""
        try:
            scheduler = self.get_scheduler_service()
            await scheduler.create_test_challenge(message.from_user.id)
            
            await message.answer(
                "üß™ <b>–¢–µ—Å—Ç–æ–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å, –ø–æ–ª—É—á–∏–ª –ª–∏ —Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —á–µ–ª–ª–µ–Ω–¥–∂–µ–º.",
                parse_mode="HTML"
            )
        except Exception as e:
            from loguru import logger
            logger.error(f"Error creating test challenge: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞.")
    
    def get_scheduler_service(self):
        """Get scheduler service from container."""
        from di.container import container
        return container.scheduler_service
    
    def get_main_menu_keyboard(self) -> InlineKeyboardMarkup:
        """Create main menu keyboard."""
        keyboard = [
            [
                InlineKeyboardButton(text="‚úÖ –ß–µ–∫-–∏–Ω", callback_data="menu_checkin"),
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu_stats")
            ],
            [
                InlineKeyboardButton(text="üç≥ –†–µ—Ü–µ–ø—Ç—ã", callback_data="menu_recipes"),
                InlineKeyboardButton(text="üìù –ó–∞–º–µ—Ç–∫–∏", callback_data="menu_notes")
            ],
            [
                InlineKeyboardButton(text="üéØ –ß–µ–ª–ª–µ–Ω–¥–∂–∏", callback_data="menu_challenge"),
                InlineKeyboardButton(text="üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data="menu_motivation")
            ],
            [
                InlineKeyboardButton(text="üç≠ –•–æ—á—É —Å–ª–∞–¥–∫–æ–≥–æ", callback_data="menu_sweet_craving"),
                InlineKeyboardButton(text="üìù –ê–Ω–∞–ª–∏–∑ —Å—Ä—ã–≤–∞", callback_data="menu_slip_analysis")
            ],
            [
                InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="menu_help")
            ]
        ]
        return InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    def get_reply_keyboard(self) -> ReplyKeyboardMarkup:
        """Create reply keyboard with Start button."""
        keyboard = [
            [KeyboardButton(text="/start")]
        ]
        return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    async def handle_menu(self, callback: CallbackQuery):
        """Handle menu button clicks."""
        async for session in get_session():
            # Debug logging
            from loguru import logger
            logger.info(f"Callback data: {callback.data}")
            
            # Handle different menu actions
            if callback.data == "menu_checkin":
                await self.show_checkin_menu(callback, session)
            elif callback.data == "menu_stats":
                await self.show_stats(callback, session)
            elif callback.data == "menu_recipes":
                await self.show_recipes_menu(callback, session)
            elif callback.data == "menu_notes":
                await self.show_notes_menu(callback, session)
            elif callback.data == "menu_challenge":
                await self.show_challenge(callback, session)
            elif callback.data == "menu_motivation":
                await self.show_motivation(callback, session)
            elif callback.data == "menu_sweet_craving":
                logger.info("Handling sweet_craving action")
                await self.show_sweet_craving(callback, session)
            elif callback.data == "menu_slip_analysis":
                await self.show_slip_analysis_menu(callback, session)
            elif callback.data == "menu_help":
                await self.show_help(callback, session)
            elif callback.data == "menu_back":
                # Clear user state and return to main menu
                user_state_service = self.get_user_state_service()
                user_state_service.clear_user_state(callback.from_user.id)
                await self.show_main_menu(callback, session)
            else:
                logger.warning(f"Unknown menu callback data: {callback.data}")
            
            await callback.answer()
    
    async def show_main_menu(self, callback: CallbackQuery, session: AsyncSession):
        """Show main menu."""
        user = await self.get_user(session, callback.from_user.id)
        
        # Refresh user object to get latest data
        await session.refresh(user)
        
        # Debug: log user data
        from loguru import logger
        logger.info(f"User {user.user_id} data in main menu: current_streak={user.current_streak}, longest_streak={user.longest_streak}")
        
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}!\n\n"
            "üç≠ –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Å–∞—Ö–∞—Ä–∞ –∏ –≤–µ—Å—Ç–∏ –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏!\n\n"
            "üìä –¢–≤–æ—è —Ç–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: <b>{}</b> –¥–Ω–µ–π\n"
            "üèÜ –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: <b>{}</b> –¥–Ω–µ–π\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
        ).format(user.current_streak, user.longest_streak)
        
        # Show inline keyboard for menu options
        inline_keyboard = self.get_main_menu_keyboard()
        
        # Show reply keyboard with Start button
        reply_keyboard = self.get_reply_keyboard()
        
        await callback.message.edit_text(
            welcome_text, 
            reply_markup=reply_keyboard,
            parse_mode="HTML"
        )
        
        # Send inline keyboard as separate message
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=inline_keyboard
        )
    
    async def show_checkin_menu(self, callback: CallbackQuery, session: AsyncSession):
        """Show check-in menu."""
        user = await self.get_user(session, callback.from_user.id)
        checkin_repo = await self.get_checkin_repo(session)
        
        # Check if user has already checked in today
        today_checkin = await checkin_repo.get_today_checkin(user.id)
        
        if today_checkin:
            status = "‚úÖ –£–¥–µ—Ä–∂–∞–ª—Å—è" if today_checkin.success else "‚ùå –°–æ—Ä–≤–∞–ª—Å—è"
            text = (
                f"üìä <b>–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —á–µ–∫-–∏–Ω</b>\n\n"
                f"–°—Ç–∞—Ç—É—Å: {status}\n"
                f"üî• –¢–≤–æ—è —Å–µ—Ä–∏—è: <b>{user.current_streak}</b> –¥–Ω–µ–π\n"
                f"üèÜ –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: <b>{user.longest_streak}</b> –¥–Ω–µ–π\n\n"
                "–ó–∞–≤—Ç—Ä–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å –Ω–æ–≤—ã–π –¥–µ–Ω—å!"
            )
            
            keyboard = [
                [
                    InlineKeyboardButton(text="üç≥ –†–µ—Ü–µ–ø—Ç—ã", callback_data="menu_recipes"),
                    InlineKeyboardButton(text="üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data="menu_motivation")
                ],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_back")]
            ]
        else:
            text = (
                f"‚úÖ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω</b>\n\n"
                "–ö–∞–∫ –ø—Ä–æ—à–µ–ª —Ç–≤–æ–π –¥–µ–Ω—å –±–µ–∑ —Å–∞—Ö–∞—Ä–∞?\n\n"
                f"üî• –¢–≤–æ—è —Å–µ—Ä–∏—è: <b>{user.current_streak}</b> –¥–Ω–µ–π\n"
                f"üèÜ –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: <b>{user.longest_streak}</b> –¥–Ω–µ–π"
            )
            
            keyboard = [
                [
                    InlineKeyboardButton(text="‚úÖ –£–¥–µ—Ä–∂–∞–ª—Å—è", callback_data="checkin_success"),
                    InlineKeyboardButton(text="‚ùå –°–æ—Ä–≤–∞–ª—Å—è", callback_data="checkin_fail")
                ],
                [
                    InlineKeyboardButton(text="üç≥ –†–µ—Ü–µ–ø—Ç—ã", callback_data="menu_recipes"),
                    InlineKeyboardButton(text="üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data="menu_motivation")
                ],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_back")]
            ]
        
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
    
    async def show_stats(self, callback: CallbackQuery, session: AsyncSession):
        """Show user statistics."""
        user = await self.get_user(session, callback.from_user.id)
        checkin_repo = await self.get_checkin_repo(session)
        
        stats = await checkin_repo.get_user_stats(user.id)
        
        text = (
            f"ÔøΩÔøΩ <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üî• –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: <b>{user.current_streak}</b> –¥–Ω–µ–π\n"
            f"üèÜ –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: <b>{user.longest_streak}</b> –¥–Ω–µ–π\n"
            f"üìÖ –í—Å–µ–≥–æ –¥–Ω–µ–π: <b>{stats['total_days']}</b>\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –¥–Ω–µ–π: <b>{stats['success_count']}</b>\n"
            f"‚ùå –°—Ä—ã–≤–æ–≤: <b>{stats['fail_count']}</b>\n"
            f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: <b>{stats['success_rate']:.1f}%</b>\n\n"
            f"üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
        )
        
        keyboard = [
            [
                InlineKeyboardButton(text="‚úÖ –ß–µ–∫-–∏–Ω", callback_data="menu_checkin"),
                InlineKeyboardButton(text="üç≥ –†–µ—Ü–µ–ø—Ç—ã", callback_data="menu_recipes")
            ],
            [
                InlineKeyboardButton(text="üìù –ó–∞–º–µ—Ç–∫–∏", callback_data="menu_notes"),
                InlineKeyboardButton(text="üéØ –ß–µ–ª–ª–µ–Ω–¥–∂–∏", callback_data="menu_challenge")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_back")]
        ]
        
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
    
    async def show_recipes_menu(self, callback: CallbackQuery, session: AsyncSession):
        """Show recipes menu."""
        text = (
            "üç≥ <b>–†–µ—Ü–µ–ø—Ç—ã –±–µ–∑ —Å–∞—Ö–∞—Ä–∞</b>\n\n"
            "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ–ª–µ–∑–Ω—ã—Ö –±–ª—é–¥ –±–µ–∑ —Å–∞—Ö–∞—Ä–∞.\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = [
            [
                InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç", callback_data="recipe_create"),
                InlineKeyboardButton(text="üìã –ú–æ–∏ —Ä–µ—Ü–µ–ø—Ç—ã", callback_data="recipe_list")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_back")]
        ]
        
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
    
    async def show_challenge(self, callback: CallbackQuery, session: AsyncSession):
        """Show daily challenge."""
        user = await self.get_user(session, callback.from_user.id)
        challenge_repo = await self.get_challenge_repo(session)
        
        today_challenge = await challenge_repo.get_today_challenge(user.id)
        
        if today_challenge:
            status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if today_challenge.completed else "‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ"
            text = (
                f"üéØ <b>–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —á–µ–ª–ª–µ–Ω–¥–∂:</b>\n\n"
                f"{today_challenge.challenge_text}\n\n"
                f"–°—Ç–∞—Ç—É—Å: {status}"
            )
            
            keyboard = []
            if not today_challenge.completed:
                keyboard.append([InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª", callback_data="challenge_complete")])
            keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_back")])
        else:
            text = "üéØ –°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–µ–ª–ª–µ–Ω–¥–∂–∞!"
            keyboard = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_back")]]
        
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
    
    async def show_notes_menu(self, callback: CallbackQuery, session: AsyncSession):
        """Show notes menu."""
        text = (
            "üìù <b>–ó–∞–º–µ—Ç–∫–∏</b>\n\n"
            "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ —Å–≤–æ–∏—Ö —É—Å–ø–µ—Ö–æ–≤ –∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –º—ã—Å–ª–∏.\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = [
            [
                InlineKeyboardButton(text="‚úèÔ∏è –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞", callback_data="note_create"),
                InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏", callback_data="note_list")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_back")]
        ]
        
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
    
    async def show_motivation(self, callback: CallbackQuery, session: AsyncSession):
        """Show motivation message."""
        motivation_service = self.get_motivation_service()
        text = motivation_service.get_daily_motivation()
        
        keyboard = [
            [
                InlineKeyboardButton(text="‚úÖ –ß–µ–∫-–∏–Ω", callback_data="menu_checkin"),
                InlineKeyboardButton(text="üç≥ –†–µ—Ü–µ–ø—Ç—ã", callback_data="menu_recipes")
            ],
            [
                InlineKeyboardButton(text="üç≠ –•–æ—á—É —Å–ª–∞–¥–∫–æ–≥–æ", callback_data="menu_sweet_craving"),
                InlineKeyboardButton(text="üéØ –ß–µ–ª–ª–µ–Ω–¥–∂–∏", callback_data="menu_challenge")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_back")]
        ]
        
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    
    async def show_help(self, callback: CallbackQuery, session: AsyncSession):
        """Show help information."""
        text = (
            "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å</b>\n\n"
            "üç≠ <b>–ë–æ—Ç –¥–ª—è –æ—Ç–∫–∞–∑–∞ –æ—Ç —Å–∞—Ö–∞—Ä–∞</b>\n\n"
            "<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
            "‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —á–µ–∫-–∏–Ω—ã\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
            "üç≥ –†–µ—Ü–µ–ø—Ç—ã –±–µ–∑ —Å–∞—Ö–∞—Ä–∞\n"
            "üéØ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏\n"
            "üìù –î–Ω–µ–≤–Ω–∏–∫ –∑–∞–º–µ—Ç–æ–∫\n"
            "üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
            "<b>–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ –ù–∞–ø–∏—à–∏ '—Ö–æ—á—É —Å–ª–∞–¥–∫–æ–≥–æ' –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n"
            "‚Ä¢ –ù–∞–∂–º–∏ 'üç≠ –•–æ—á—É —Å–ª–∞–¥–∫–æ–≥–æ' –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"
        )
        
        keyboard = [
            [
                InlineKeyboardButton(text="‚úÖ –ß–µ–∫-–∏–Ω", callback_data="menu_checkin"),
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu_stats")
            ],
            [
                InlineKeyboardButton(text="üç≥ –†–µ—Ü–µ–ø—Ç—ã", callback_data="menu_recipes"),
                InlineKeyboardButton(text="üìù –ó–∞–º–µ—Ç–∫–∏", callback_data="menu_notes")
            ],
            [
                InlineKeyboardButton(text="üéØ –ß–µ–ª–ª–µ–Ω–¥–∂–∏", callback_data="menu_challenge"),
                InlineKeyboardButton(text="üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data="menu_motivation")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_back")]
        ]
        
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
    
    async def show_sweet_craving(self, callback: CallbackQuery, session: AsyncSession):
        """Show alternatives to sweets."""
        try:
            user = await self.get_user(session, callback.from_user.id)
            
            # Send waiting message first
            waiting_message = await callback.message.edit_text(
                "‚è≥ <b>–ò—â—É –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã —Å–ª–∞–¥–∫–æ–º—É...</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∫–∞ —è –ø–æ–¥–±–∏—Ä–∞—é –¥–ª—è –≤–∞—Å –ø–æ–ª–µ–∑–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã! üçé",
                parse_mode="HTML"
            )
            
            # Get alternative snacks
            recipe_service = self.get_recipe_service()
            alternatives = await recipe_service.get_alternative_snacks()
            
            text = (
                "üç≠ <b>–•–æ—á–µ—à—å —Å–ª–∞–¥–∫–æ–≥–æ? –ü–æ–ø—Ä–æ–±—É–π —ç—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã!</b>\n\n"
                f"{alternatives}\n\n"
                "üí™ –ü–æ–º–Ω–∏: –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å –∑–¥–æ—Ä–æ–≤—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É, "
                "—Ç—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —Å–∏–ª—å–Ω–µ–µ!"
            )
            
            keyboard = [
                [
                    InlineKeyboardButton(text="üç≥ –ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç", callback_data="recipe_create"),
                    InlineKeyboardButton(text="üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data="menu_motivation")
                ],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_back")]
            ]
            
            await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
            
        except Exception as e:
            from loguru import logger
            logger.error(f"Error in show_sweet_craving: {e}")
            
            # Fallback message
            text = (
                "üç≠ <b>–•–æ—á–µ—à—å —Å–ª–∞–¥–∫–æ–≥–æ? –ü–æ–ø—Ä–æ–±—É–π —ç—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã!</b>\n\n"
                "–í–º–µ—Å—Ç–æ —Å–ª–∞–¥–∫–æ–≥–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:\n\n"
                "üçé –Ø–±–ª–æ–∫–æ —Å –∫–æ—Ä–∏—Ü–µ–π\n"
                "ü•ú –ì–æ—Ä—Å—Ç—å –æ—Ä–µ—Ö–æ–≤ (–º–∏–Ω–¥–∞–ª—å, –≥—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏)\n"
                "ü•ë –ê–≤–æ–∫–∞–¥–æ —Å —Å–æ–ª—å—é –∏ –ø–µ—Ä—Ü–µ–º\n"
                "ü•ï –ú–æ—Ä–∫–æ–≤–Ω—ã–µ –ø–∞–ª–æ—á–∫–∏ —Å —Ö—É–º—É—Å–æ–º\n"
                "üçì –ö–ª—É–±–Ω–∏–∫–∞ –∏–ª–∏ –¥—Ä—É–≥–∏–µ —è–≥–æ–¥—ã\n"
                "ü•ö –í–∞—Ä–µ–Ω–æ–µ —è–π—Ü–æ\n"
                "üßÄ –ö—É—Å–æ—á–µ–∫ —Å—ã—Ä–∞\n"
                "ü•¨ –õ–∏—Å—Ç—å—è —Å–∞–ª–∞—Ç–∞ —Å –æ–ª–∏–≤–∫–æ–≤—ã–º –º–∞—Å–ª–æ–º\n"
                "üå∞ –°–µ–º–µ—á–∫–∏ –ø–æ–¥—Å–æ–ª–Ω—É—Ö–∞ –∏–ª–∏ —Ç—ã–∫–≤—ã\n"
                "ü•õ –ì—Ä–µ—á–µ—Å–∫–∏–π –π–æ–≥—É—Ä—Ç –±–µ–∑ –¥–æ–±–∞–≤–æ–∫\n\n"
                "üí™ –ü–æ–º–Ω–∏: –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å –∑–¥–æ—Ä–æ–≤—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É, "
                "—Ç—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —Å–∏–ª—å–Ω–µ–µ!"
            )
            
            keyboard = [
                [
                    InlineKeyboardButton(text="üç≥ –ù–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç", callback_data="recipe_create"),
                    InlineKeyboardButton(text="üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data="menu_motivation")
                ],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_back")]
            ]
            
            await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")

    async def show_slip_analysis_menu(self, callback: CallbackQuery, session: AsyncSession):
        """Show slip analysis menu."""
        text = (
            "üìù <b>–ê–Ω–∞–ª–∏–∑ —Å—Ä—ã–≤–∞</b>\n\n"
            "–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ:\n\n"
            "üîç <b>–ü–æ–Ω—è—Ç—å –ø—Ä–∏—á–∏–Ω—ã —Å—Ä—ã–≤–∞</b>\n"
            "‚Ä¢ –ß—Ç–æ –ø—Ä–∏–≤–µ–ª–æ –∫ —Å—Ä—ã–≤—É?\n"
            "‚Ä¢ –ö–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ —Ç—ã –∏—Å–ø—ã—Ç—ã–≤–∞–ª?\n"
            "‚Ä¢ –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ –≤–æ–∫—Ä—É–≥?\n\n"
            "üí° <b>–°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –Ω–∞ –±—É–¥—É—â–µ–µ</b>\n"
            "‚Ä¢ –ö–∞–∫ –∏–∑–±–µ–∂–∞—Ç—å —Ç–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?\n"
            "‚Ä¢ –ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É?\n"
            "‚Ä¢ –ö–∞–∫–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?\n\n"
            "üìö <b>–°–æ–∑–¥–∞—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π</b>\n"
            "‚Ä¢ –í—Å–µ –∞–Ω–∞–ª–∏–∑—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –∑–∞–º–µ—Ç–∫–∞—Ö\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞—Ç—å –ø–µ—Ä–µ–¥ —Å–ª–æ–∂–Ω—ã–º–∏ —Å–∏—Ç—É–∞—Ü–∏—è–º–∏\n"
            "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤\n\n"
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑:"
        )
        
        keyboard = [
            [InlineKeyboardButton(text="üìù –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Å—Ä—ã–≤–∞", callback_data="slip_analysis")],
            [
                InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏", callback_data="note_list"),
                InlineKeyboardButton(text="üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data="menu_motivation")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_back")]
        ]
        
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")

 