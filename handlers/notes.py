from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession

from handlers.base import BaseHandler
from di.dependencies import get_session


class NotesHandler(BaseHandler):
    """Handler for notes functionality."""
    
    def __init__(self):
        super().__init__()
        self.router.message.register(self.note_command, Command("note"))
        self.router.callback_query.register(self.handle_notes, F.data.startswith("note_"))
    
    async def note_command(self, message: Message):
        """Handle /note command."""
        async for session in get_session():
            await self.start_note_creation(message, session)
    
    async def handle_notes(self, callback: CallbackQuery):
        """Handle notes menu actions."""
        async for session in get_session():
            action = callback.data.split("_")[1]
            
            if action == "create":
                await self.start_note_creation(callback.message, session)
            elif action == "list":
                await self.show_notes_list(callback, session)
            
            await callback.answer()
    
    async def start_note_creation(self, message: Message, session: AsyncSession):
        """Start note creation process."""
        text = (
            "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏</b>\n\n"
            "–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –º—ã—Å–ª–∏, —á—É–≤—Å—Ç–≤–∞ –∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å!\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∑–∞–º–µ—Ç–∫–∏."
        )
        
        keyboard = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_back")]]
        await message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML")
    
    async def show_notes_list(self, callback: CallbackQuery, session: AsyncSession):
        """Show user's notes list."""
        user = await self.get_user(session, callback.from_user.id)
        note_repo = await self.get_note_repo(session)
        
        notes = await note_repo.get_user_notes(user.id, limit=10)
        
        if notes:
            text = "üìù <b>–¢–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:</b>\n\n"
            for i, note in enumerate(notes, 1):
                date_str = note.created_at.strftime("%d.%m.%Y")
                text += f"<b>{i}.</b> {date_str}\n{note.content[:100]}{'...' if len(note.content) > 100 else ''}\n\n"
        else:
            text = "üìù –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.\n\n–°–æ–∑–¥–∞–π –ø–µ—Ä–≤—É—é –∑–∞–º–µ—Ç–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫!"
        
        keyboard = [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu_back")]]
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard), parse_mode="HTML") 