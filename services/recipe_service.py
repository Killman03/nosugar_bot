import json
import httpx
import asyncio
from typing import Optional
from loguru import logger

from config import settings


class RecipeService:
    """Service for generating sugar-free recipes using DeepSeek API."""
    
    def __init__(self):
        self.api_key = settings.deepseek_api_key
        self.api_url = settings.deepseek_api_url
    
    async def generate_recipe(self, ingredients: str) -> Optional[str]:
        """Generate a sugar-free recipe based on provided ingredients."""
        try:
            prompt = f"""
            –°–æ–∑–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –±–ª—é–¥–∞ –±–µ–∑ —Å–∞—Ö–∞—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–µ–¥—É—é—â–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {ingredients}
            
            –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
            - –ë–ª—é–¥–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∫—É—Å–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º
            - –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∞—Ö–∞—Ä, –º–µ–¥, —Å–∏—Ä–æ–ø—ã –∏ –¥—Ä—É–≥–∏–µ –ø–æ–¥—Å–ª–∞—Å—Ç–∏—Ç–µ–ª–∏
            - –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —Å–ø–µ—Ü–∏–∏ –∏ —Ç—Ä–∞–≤—ã
            - –£–∫–∞–∂–∏ –ø–æ—à–∞–≥–æ–≤—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
            - –î–æ–±–∞–≤—å –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
            
            –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
            –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
            
            –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
            - —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
            
            –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: X –º–∏–Ω—É—Ç
            
            –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
            1. –®–∞–≥ 1
            2. –®–∞–≥ 2
            –∏ —Ç.–¥.
            """
            
            async with httpx.AsyncClient(timeout=30.0) as client:
                try:
                    response = await asyncio.wait_for(
                        client.post(
                            self.api_url,
                            headers={
                                "Authorization": f"Bearer {self.api_key}",
                                "Content-Type": "application/json"
                            },
                            json={
                                "model": "deepseek-chat",
                                "messages": [
                                    {
                                        "role": "user",
                                        "content": prompt
                                    }
                                ],
                                "max_tokens": 1000,
                                "temperature": 0.7
                            }
                        ),
                        timeout=30.0  # 30 seconds timeout
                    )
                    
                    if response.status_code == 200:
                        data = response.json()
                        recipe_text = data["choices"][0]["message"]["content"]
                        logger.info(f"Generated recipe for ingredients: {ingredients}")
                        return recipe_text
                    else:
                        logger.error(f"DeepSeek API error: {response.status_code} - {response.text}")
                        return None
                        
                except asyncio.TimeoutError:
                    logger.warning(f"DeepSeek API request timeout for ingredients: {ingredients}")
                    return None
                    
        except Exception as e:
            logger.error(f"Error generating recipe: {e}")
            return None
    
    async def get_alternative_snacks(self) -> str:
        """Get alternative snack suggestions when user wants sweets."""
        try:
            # Simulate AI processing time
            await asyncio.sleep(2)
            
            alternatives = [
                "üçé –Ø–±–ª–æ–∫–æ —Å –∫–æ—Ä–∏—Ü–µ–π",
                "ü•ú –ì–æ—Ä—Å—Ç—å –æ—Ä–µ—Ö–æ–≤ (–º–∏–Ω–¥–∞–ª—å, –≥—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏)",
                "ü•ë –ê–≤–æ–∫–∞–¥–æ —Å —Å–æ–ª—å—é –∏ –ø–µ—Ä—Ü–µ–º",
                "ü•ï –ú–æ—Ä–∫–æ–≤–Ω—ã–µ –ø–∞–ª–æ—á–∫–∏ —Å —Ö—É–º—É—Å–æ–º",
                "üçì –ö–ª—É–±–Ω–∏–∫–∞ –∏–ª–∏ –¥—Ä—É–≥–∏–µ —è–≥–æ–¥—ã",
                "ü•ö –í–∞—Ä–µ–Ω–æ–µ —è–π—Ü–æ",
                "üßÄ –ö—É—Å–æ—á–µ–∫ —Å—ã—Ä–∞",
                "ü•¨ –õ–∏—Å—Ç—å—è —Å–∞–ª–∞—Ç–∞ —Å –æ–ª–∏–≤–∫–æ–≤—ã–º –º–∞—Å–ª–æ–º",
                "üå∞ –°–µ–º–µ—á–∫–∏ –ø–æ–¥—Å–æ–ª–Ω—É—Ö–∞ –∏–ª–∏ —Ç—ã–∫–≤—ã",
                "ü•õ –ì—Ä–µ—á–µ—Å–∫–∏–π –π–æ–≥—É—Ä—Ç –±–µ–∑ –¥–æ–±–∞–≤–æ–∫"
            ]
            
            return "–í–º–µ—Å—Ç–æ —Å–ª–∞–¥–∫–æ–≥–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:\n\n" + "\n".join(alternatives)
            
        except Exception as e:
            logger.error(f"Error getting alternative snacks: {e}")
            return "–í–º–µ—Å—Ç–æ —Å–ª–∞–¥–∫–æ–≥–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:\n\nüçé –Ø–±–ª–æ–∫–æ —Å –∫–æ—Ä–∏—Ü–µ–π\nü•ú –ì–æ—Ä—Å—Ç—å –æ—Ä–µ—Ö–æ–≤\nü•ë –ê–≤–æ–∫–∞–¥–æ" 